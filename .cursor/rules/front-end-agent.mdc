---
globs: *.tsx,*.ts,*.css,*.json
alwaysApply: false
---
You are an expert in TypeScript 5, React 19, Node.js 22, Next.js 15 App Router, Shadcn UI, Radix UI and Tailwind CSS.

  Code Style and Structure
  - Write concise, technical TypeScript code following Standard.js rules.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported named component, subcomponents, helpers, static content.

  Standard.js Rules
  - Use 2 space indentation (tabWidth: 2).
  - Use single quotes for strings except to avoid escaping (singleQuote: true).
  - No semicolons unless required to disambiguate statements (semi: false).
  - No unused variables.
  - Add a space after keywords.
  - Add a space before a function declaration's parentheses.
  - Always use === instead of ==.
  - Infix operators must be spaced.
  - Use trailing commas in objects and arrays (trailingComma: 'all').
  - Keep else statements on the same line as their curly braces.
  - For multi-line if statements, use curly braces.
  - Always handle the err function parameter.
  - Use camelcase for variables and functions.
  - Use PascalCase for constructors and React components.
  - Maximum line length of 100 characters (printWidth: 100).
  - Use spaces between brackets (bracketSpacing: true).
  - Always use parentheses with arrow functions (arrowParens: 'always').
  - Use LF for line endings (endOfLine: 'lf').
  - Quote properties in objects only when needed (quoteProps: 'as-needed').
  - Sort json attributes alphabetically.

  JSX and Styling Rules
  - Use double quotes in JSX attributes.
  - Place each HTML attribute on a new line (singleAttributePerLine: true).
  - Use Tailwind CSS class sorting.

  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.

  TypeScript Rules
  - Write jsdoc comments for all functions and classes.
  - Use type inference for simple types.
  - Use interfaces for complex types.
  - Use type guards to check for specific types.
  - Sort interfaces alphabetically.

  React Best Practices
  - Use functional components with prop-types for type checking.
  - Use the "function" keyword for component definitions.
  - Implement hooks correctly (useState, useEffect, useContext, useReducer, useMemo, useCallback).
  - Follow the Rules of Hooks (only call hooks at the top level, only call hooks from React functions).
  - Create custom hooks to extract reusable component logic.
  - Use React.memo() for component memoization when appropriate.
  - Implement useCallback for memoizing functions passed as props.
  - Use useMemo for expensive computations.
  - Avoid inline function definitions in render to prevent unnecessary re-renders.
  - Prefer composition over inheritance.
  - Use children prop and render props pattern for flexible, reusable components.
  - Implement React.lazy() and Suspense for code splitting.
  - Use refs sparingly and mainly for DOM access.
  - Prefer controlled components over uncontrolled components.
  - Implement error boundaries to catch and handle errors gracefully.
  - Use cleanup functions in useEffect to prevent memory leaks.
  - Use short-circuit evaluation and ternary operators for conditional rendering.

  State Management
  - Use Zustand or React Context for global state management.
  - Lift state up when needed to share state between components.
  - Use context for intermediate state sharing when prop drilling becomes cumbersome.

  UI and Styling
  - packages/ui is a library of components that are built with Shadcn UI and Radix UI.
  - Use Shadcn UI and Radix UI for component foundations.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.
  - Use Tailwind for utility classes and rapid prototyping.

  Performance Optimization
  - Minimize 'use client', 'useEffect', and 'useState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.
  - Implement route-based code splitting in Next.js.
  - Minimize the use of global styles; prefer modular, scoped styles.

  Forms and Validation
  - Use controlled components for form inputs.
  - Implement form validation (client-side and server-side).
  - Consider using libraries like react-hook-form for complex forms.
  - Use Zod for schema validation.

  Error Handling and Validation
  - Prioritize error handling and edge cases.
  - Handle errors and edge cases at the beginning of functions.
  - Use early returns for error conditions to avoid deeply nested if statements.
  - Place the happy path last in the function for improved readability.
  - Avoid unnecessary else statements; use if-return pattern instead.
  - Use guard clauses to handle preconditions and invalid states early.
  - Implement proper error logging and user-friendly error messages.
  - Model expected errors as return values in Server Actions.

  Accessibility (a11y)
  - Use semantic HTML elements.
  - Implement proper ARIA attributes.
  - Ensure keyboard navigation support.

  Testing
  - Write unit tests for components using vitest and vitest-browser-react.
  - Write e2e tests for critical user flows using playwright.
  - Implement integration tests for critical user flows.
  - Use snapshot testing judiciously.

  File Structure
  - Use the following file structure:
    - packages/
      - ui/
        - src/
          - components/
            - button/
              - index.tsx
              - button.test.tsx
    - apps/
      - web/
        - src/
          - app/
            - layout.tsx
            - page.tsx
          - lib/
            - utils.ts
            - utils.test.ts
          - components/
            - header/
              - index.tsx
              - header.test.tsx
        - test/
          - e2e/
            - sanity.e2e.ts
          - integration/
            - api.spec.ts

  Security
  - Sanitize user inputs to prevent XSS attacks.
  - Use dangerouslySetInnerHTML sparingly and only with sanitized content.

  Internationalization (i18n)
  - Use libraries like next-intl for internationalization.

  Key Conventions
  - Use 'nuqs' for URL search parameter state management.
  - Optimize Web Vitals (LCP, CLS, FID).
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.
  - Use Tailwind for rapid development and consistent spacing/sizing.

  Follow Next.js docs for Data Fetching, Rendering, caching and Routing.